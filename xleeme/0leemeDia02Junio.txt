https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/restapi/01-marketplace.md
/react-frontend/src/components/DogsComponent.jsx
ejercicio de repaso de llamada API de Dogs (https://dog.ceo/) que tiene una API un tanto "regu" porque los datos
de los resultados que devuelve no están bien estructurados.

**********************

https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/mongodb/01-changeeventstreams.md
modificar express-mongodb
Ejercicio en el que se usa mongodb pero con el backend a la ESCUCHA en tipo real, de los cambios en la base de datos 
mediante Change Event Stream (flujo de eventos de cambio).
En caso de una API al uso lo que hacemos es pedir los datos y recibimos
los resultados, en este caso lo que hacemos es tener el backend a la escucha de cualquier cambio (EVENTO) en la base de datos
como insertar, actualizar, eliminar, 

en /express-mongodb nuevo fichero
client-changeeventsstream.js
copiar codigo de 
https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/mongodb/01-client-demo-changeventstream.js

*******************
CODIGO INICIAL
*******************
import { MongoClient } from "mongodb";
import dotenv from 'dotenv';

dotenv.config();

// Replace with your actual MongoDB Atlas connection string
const uri = process.env.MONGODB_URI;

const client = new MongoClient(uri);

async function run() {
  try {
    // Connect the client to the server
    await client.connect();

    const database = client.db("clase");
    const productos = database.collection("productos");

    // Open a change stream on the collection
    const changeStream = productos.watch(); // por regla general se escuha todo EVENTO

  //  OTRO EJEMPLO EN CASO DE QUE QUERAMOS ALGUN EVENTO EN CONCRETO
  //  const changeStream = productos.watch(
  //    [
  //      {
  //        $match: {operationType: {$in : ['delete', 'insert']}} // aqui podemos poner lo que necesitemos si hay varios
  //      }
  //    ],
  //    {
  //      fullDocument: "updateLookup"
  //    }
  //  );

    changeStream.on("change", (change) => {
      console.log("Change detected:");
      console.log(JSON.stringify(change, null, 2));

      if (change.operationType === "insert") {
        console.log("New document inserted:", change.fullDocument);
      }

      if (change.operationType === "delete") {
        console.log("Document deleted with _id:", change.documentKey._id);
      }

      // Add other operationType handlers as needed
    });

    process.stdin.resume();

// Handle shutdown signals gracefully
// Manejo de cierre limpio de conexion 
     // SI PULSAMOS CTR+C
    process.on("SIGINT", async () => {
      console.log("SIGINT received, closing connection...");
      await client.close();
      console.log("Connection closed. Exiting...");
      process.exit(0);
    });
    // SI CERRAMOS SESION CON KILL
    process.on("SIGTERM", async () => {
      console.log("SIGTERM received, closing connection...");
      await client.close();
      console.log("Connection closed. Exiting...");
      process.exit(0);
    });

  } catch (error) {
    console.error("Error connecting to MongoDB or running commands:", error);
  }
}

run();
/* CODIGO NO USABLE DE UNA PRUEBA ANTERIOR
changeStream.on("error", (error) => {
  console.error("Change stream error:", error);
});

changeStream.on("close", () => {
  console.log("Change stream closed.");
}); */
*******************
FIN CODIGO INICIAL
*******************

*******************
*******************
PRUEBA
ejecutar con node client-changeeventsstream.js
Ejecuta un backend en express que se queda a la escucha de algun EVENTO (cambio) en la base de datos en este caso 
de la COLECCION (tabla)
Crear en mongodb 1 DOCUMENTO (registro) en la BASE DE DATOS clase COLECCION (tabla) productos
borrar 1 DOCUMENTO (registro)
Se reflejaran los movimientos en la consola del backend
El backend hace que establezca una conexion directa pero sin usar recursos
No es como una api que mandamos todo y recibimos resultados

https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/mongodb/01-changeeventstreams.md
ejercicio
Actividad 1:
Vamos a implantar un sistema de change streaming para controlar que haya un stock minimo cuando se cree un producto
En lugar de hacer un trigger en backend en este caso hacemos la accion en backend
*******************
CODIGO PROPUESTO PARA ACTIVIDAD 1
*******************
import { MongoClient } from "mongodb";
import dotenv from 'dotenv';

dotenv.config();

const uri = process.env.MONGODB_URI;

const client = new MongoClient(uri);

// 1. definir un constante de LOW_STOCK

async function run() {
  try {
   
    await client.connect();

    const database = client.db("clase");
    const productos = database.collection("productos");

    // Open a change stream on the collection
    
    // 2. ¿Qué operaciones quieres controlar de MongoDB?
    
    const changeStream = productos.watch(
      [
        {
          $match: {operationType: {$in : ['delete']}}
        }
      ],
      {
        fullDocument: "updateLookup"
      }
    );
    // Incluimos fullDocument: "updateLookup" ya que por defecto un update no recibe el documento

    changeStream.on("change", (change) => {
        const id = change.documentKey._id;
        const producto = change.fullDocument;
      
        // 3. Comprobar que tienes un objecto producto

        // 4. Validar si la cantidad es menos o igual que LOW_STOCK
        // Mandar un mensaje al usuario (console.log)
    });

    process.stdin.resume();

     // Handle shutdown signals gracefully
    process.on("SIGINT", async () => {
      await client.close();
      process.exit(0);
    });

    process.on("SIGTERM", async () => {
      await client.close();
      process.exit(0);
    });



  } catch (error) {
    console.error("Error connecting to MongoDB or running commands:", error);
  }
}

run();
*******************
FIN CODIGO PROPUESTO ACTIVIDAD 1
*******************

*******************
*******************
SOLUCION FINAL

Crear codigo para revisar el insert de un producto con LOW_STOCK, si cantidad es menor de LOW_STOCK da un aviso y se 
crea un pedido en la COLECCION (tabla) pedidos
 y creamos otro cliente (proveedor)
que escuche los cambios en pedidos

IMPLICA 2 ESCUCHAS la de arriba y otra para proveedor (RECORDAR !! EJECUTAR CON node fichero.js)
client-lowstockeventstream.js  client-proveedorchangeeventstream.js
************************
CODIGO MODIFICADO EN client-lowstockeventstream.js
*******************
import { MongoClient, ObjectId } from "mongodb";
import dotenv from 'dotenv';

dotenv.config();

const uri = process.env.MONGODB_URI;

const client = new MongoClient(uri);

// 1. definir un constante de LOW_STOCK
const LOW_STOCK = 50

async function run() {
  try {
   
    await client.connect();

    const database = client.db("clase");
    const productos = database.collection("productos");
    const pedidos = database.collection("pedidos")

    // Open a change stream on the collection
    
    // 2. ¿Qué operaciones quieres controlar de MongoDB?
        
    // QUITAMOS DEL CODIGO ORIGINAL POR QUE QUEREMOS EN UN INSERT
    // const changeStream = productos.watch(
    //     [
    //       {
    //         $match: {operationType: {$in : ['delete']}}
    //       }
    //     ],
    //     {
    //       fullDocument: "updateLookup"
    //     }
    //   );
      const changeStream = productos.watch(
        [
          {
            $match: {operationType: {$in : ['insert']}}
          }
        ],
        {
          fullDocument: "updateLookup" // OBLIGATORIO SIEMPRE
        }
      );
        // Incluimos fullDocument: "updateLookup" ya que por defecto un update no recibe el documento

    changeStream.on("change", async (change) => {
        const id = change.documentKey._id;
        const producto = change.fullDocument;
      
        // 3. Comprobar que tienes un objecto producto
        if (producto) {
            // 4. Validar si la cantidad es menos o igual que LOW_STOCK
            // Mandar un mensaje al usuario (console.log)
            if (producto.cantidad < LOW_STOCK) {
                console.log(`AVISO !! STOCK BAJO - ${producto.cantidad}, creando pedido`)
                // hacer insert en pedidos
                const pedido = {
                    prodId: producto.prodId,
                    nombreProducto: producto.nombreProducto,
                    cantidad: 100,                  // HACEMOS PEDIDO DE 100 UNIDADES
                    fecha_pedido: new Date()
                }
                // db.productos.insertOne(pedido);
                const result = await pedidos.insertOne(pedido);
            }
            else {
                console.log(`Producto creado`)
            }        }   
    });

    process.stdin.resume();

     // Handle shutdown signals gracefully
    process.on("SIGINT", async () => {
      await client.close();
      process.exit(0);
    });

    process.on("SIGTERM", async () => {
      await client.close();
      process.exit(0);
    });

  } catch (error) {
    console.error("Error connecting to MongoDB or running commands:", error);
  }
}

run();
************************
FIN CODIGO EN client-lowstockeventstream.js 
*******************

*******************
CODIGO EN client-proveedorchangeeventstream.js
*******************
import { MongoClient } from "mongodb";
import dotenv from 'dotenv';

dotenv.config();

// Replace with your actual MongoDB Atlas connection string
const uri = process.env.MONGODB_URI;

const client = new MongoClient(uri);

async function run() {
  try {
    // Connect the client to the server
    await client.connect();

    const database = client.db("clase");
    const productos = database.collection("pedidos");

    // Open a change stream on the collection
    const changeStream = productos.watch(); // conexion directa escuchando todo el rato a la base datos

    changeStream.on("change", (change) => { // se recive un change formato json
      console.log("Change detected:");
      console.log(JSON.stringify(change, null, 2));

      if (change.operationType === "insert") {
        console.log("New document inserted:", change.fullDocument);
        console.log(`Nuevo pedido: ${change.fullDocument._id}`)
        // aqui se puedría hacer más codigo para por ejempl cuando se cree o añada productos
        // para que actualice a una nueva tabla de pedidos
      }

      if (change.operationType === "delete") {
        console.log("Document deleted with _id:", change.documentKey._id);
      }

      // Add other operationType handlers as needed
    });

    process.stdin.resume(); // esto es para que salga info en la consola

     // Handle shutdown signals gracefully
    process.on("SIGINT", async () => {
      console.log("SIGINT received, closing connection...");
      await client.close();
      console.log("Connection closed. Exiting...");
      process.exit(0);
    });

    process.on("SIGTERM", async () => {
      console.log("SIGTERM received, closing connection...");
      await client.close();
      console.log("Connection closed. Exiting...");
      process.exit(0);
    });

  } catch (error) {
    console.error("Error connecting to MongoDB or running commands:", error);
  }
}

run();

/* CODIGO NO USABLE DE UNA PRUEBA ANTERIOR
changeStream.on("error", (error) => {
  console.error("Change stream error:", error);
});

changeStream.on("close", () => {
  console.log("Change stream closed.");
});*/
*******************
FIN CODIGO EN client-proveedorchangeeventsstream.js
*******************



********************
https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/websockets/01-introduccion.md
ABRIR express-mongodb (teníamos de un ejercicio anterior mondado para que se use express/mongodb/routes/productos.js)
npm run dev

en navegador http://localhost:5000/api/v1/productos
recibimos respuesta de productos

crear desde mern4-jrg
npm create vite@latest vite-frontend
react
javascript
cd vite-frontend
npm run dev
crear carpeta /src/components
crear archivo Polling.jsx
/components/Polling.jsx

Para este demo, quitar los comentarios de setInterval
********************
CODIGO Polling.jsx
********************
import React, { useEffect, useState } from 'react';


const Polling = () => {
  const [productos, setProductos] = useState([]);
  const [isRefreshing, setIsRefreshing] = useState(false);


  const fetchProductos = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/v1/productos');

      if (!response.ok) throw new Error('Error en la respuesta');
      const data = await response.json();
      setProductos(data);
      

    } catch (error) {
      console.error('Error al obtener los productos:', error);
    }
  };

  useEffect(() => {
    /* const interval = setInterval(() => {
      setIsRefreshing(true);
      setTimeout(() => {
        setIsRefreshing(false);
        fetchProductos();
      }, 1000); // wait 1 second before fetch
    }, 5000);
    */

    fetchProductos(); // initial load

    // return () => clearInterval(interval); // cleanup
  }, []);

  return (
    <div style={{ padding: '2rem' }}>

    {isRefreshing && (
        <div style={{ color: 'orange', marginBottom: '1rem' }}>
        Actualizando productos...
        </div>
    )}

      <h2>📦 Productos (con polling)</h2>
      {productos.map((prod) => (
        <div key={prod._id} style={{ marginBottom: '1rem' }}>
          <strong>{prod.nombreProducto}</strong> — {prod.cantidad} unidades
          
        </div>
      ))}
    </div>
  );
}

export default Polling;
********************
FIN CODIGO Polling.jsx
********************

modificar App.jsx
********************
CODIGO App.jsx
********************
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'
import Polling from './components/Polling'

function App() {

  return (
    <>
      <Polling />
    </>
  )
}

export default App
********************
FIN CODIGO Polling.jsx
********************

NOS MOSTRARÁ TODOS LOS PRODUCTOS
si cambiamos un registro en mongodb NO SE ACTUALIZA EN REACT hasta que refresquemos
pero con este código se refresca cada 5 segundos

https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1846-Web-Distribuidas/websockets/01-Polling.jsx
ejercicio
import React, { useEffect, useState } from 'react';


const Polling = () => {
  const [productos, setProductos] = useState([]);
  const [isRefreshing, setIsRefreshing] = useState(false);


  const fetchProductos = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/v1/productos');

      if (!response.ok) throw new Error('Error en la respuesta');
      const data = await response.json();
      setProductos(data);
      

    } catch (error) {
      console.error('Error al obtener los productos:', error);
    }
  };

  useEffect(() => {
    /* const interval = setInterval(() => {
      setIsRefreshing(true);
      setTimeout(() => {
        setIsRefreshing(false);
        fetchProductos();
      }, 1000); // wait 1 second before fetch
    }, 5000);
    */

    fetchProductos(); // initial load

    // return () => clearInterval(interval); // cleanup
  }, []);

  return (
    <div style={{ padding: '2rem' }}>

    {isRefreshing && (
        <div style={{ color: 'orange', marginBottom: '1rem' }}>
        Actualizando productos...
        </div>
    )}

      <h2>📦 Productos (con polling)</h2>
      {productos.map((prod) => (
        <div key={prod._id} style={{ marginBottom: '1rem' }}>
          <strong>{prod.nombreProducto}</strong> — {prod.cantidad} unidades
          
        </div>
      ))}
    </div>
  );
}

export default Polling;

{/*
Actualizar:
- un efecto, indicador visual para el mensaje de 'Actualizando productos' i.e. circular progress
- un indicador de colores para la cantidad <5 rojo, < 10 verde, ...
- dejar que el usuario modifique el intervalo de polling - select onChange
- habilitar / desabilitar el polling
- detectar cambios y mostrar un mansaje - 'un nuevo producto ha sido añadido' (avanzado)
*/}

instalar
npm install @mui/material @emotion/react @emotion/styled
npm install @fontsource/roboto
npm install @mui/icons-material
