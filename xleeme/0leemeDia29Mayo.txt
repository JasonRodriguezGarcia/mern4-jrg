https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/mongodb/07-aggregations.md
Actividades de repaso
Usando la base de datos movies:

Contar el número de peliculas con el año 1903 o 1914 (year).
{
  year:  {$in: [1903, 1914]}
}

Para cada año (year), queremos mostrar el número de películas que han sacado, ordenado por mayor a menor.
[
  {
    '$group': {
      '_id': '$year', 
      'peliculas': {
        '$sum': 1
      }
    }
  }, {
    '$sort': {
      '_id': -1
    }
  }, {
    '$project': {
      '_id': 0, 
      'año': '$_id', 
      'cuenta': '$peliculas'
    }
  }
]
Encontrar los top 5 peliculas (limit: 5) por genero (genres). Seguir los pasos:

Empezar con $unwind para producir un documento por cada genre. Fijate en el indice 'genreIndex' añadido
 al final de cada documento. 
 (genres es un array en cada pelicula, lo que hacemos es desglosarlo)
 poner en $unwind { path: '$genres', includeArrayIndex: 'genreIndex', preserveNullAndEmptyArrays: true }
{
  path: "$genres",
  includeArrayIndex: 'genreIndex',
  preserveNullAndEmptyArrays: true
}
Llevar a cabo un $group by en genre, para conseguir la suma de todos los documentos por genero.
{
  _id: "$genres",
  sumaGeneros: {
    $sum: 1
  }
}
Ordenar por mayor

Sacar los primero 5 ($limit)

¿Podrias llevar a cabo lo mismo en countries para sacar una lista única de valores? Probarlo también 
con db.movies.distinct("countries");
texto de mongodb atlas
[
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$countries",
        includeArrayIndex: "countryIndex",
        preserveNullAndEmptyArrays: true,
      },
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$countries",
        sumaCountries: {
          $sum: 1,
        },
      },
  },
]


*************************
*************************
https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/mongodb/06-transactions.mongodb.sql

use("clase");
db.accounts.insertMany([
  { name: "Jon", balance: 100 },
  { name: "Maria", balance: 100 }
]);
db.accounts.find({});


******************
https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/mongodb/08-mini-proyecto-taxis.md

1- crear docs en MongoDB
    Creado bbdd taxis collection users
    Añadir datos con Playground
use('taxis');
db.users.insertOne(
{
  _id: ObjectId(),
  nombre: "Alice Smith",
  correo_electronico: "alice@email.com",
  saldo: 80,

  viajes: [
    {
      id_viaje: ObjectId(),
      lugar_recogida: "Calle Principal",
      lugar_destino: "Avenida del Parque",
      estado: "completado", // "reservado", "en curso", "completado", "cancelado"
      costo: 15,
      fecha_hora: ISODate("2025-05-27T14:00:00Z")
    },
    {
      id_viaje: ObjectId(),
      lugar_recogida: "Biblioteca",
      lugar_destino: "Museo",
      estado: "en curso",
      costo: 9,
      fecha_hora: ISODate("2025-05-27T15:00:00Z")
    }
  ]
});

2- express
    /routes/taxis
3- reactJS
    ejemplo de pagina sin datos



