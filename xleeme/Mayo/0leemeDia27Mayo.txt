IMPORTANTE REVISAR https://www.mongodb.com/docs/manual/data-modeling/

https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/mongodb/03-consultas.md

Usando playground permite escribir comandos sueltos en entorno de mongodb

ObjectIds are 12-byte unique identifiers automatically generated by MongoDB unless you provide your own.

Press Ctrl + Alt + R (or Cmd + Option + R on Mac), OR

Click the "Play ▶️" button that appears above the query, OR

     "Run All MongoDB Commands".

use("sample_mflix")
db.help // admin commandos

// getName,getCollectionNames, getCollection, getUsers, hello (checks connection), stats
db.getName()


/*
Busquedas de repaso

Encontrar:
Embedded Movies
- documento con genre (género) en "Comedy".

use('sample_mflix');
db.embedded_movies.find({genres: "Comedy"}).limit(3);

- documento con el plot (argumento) que contenga "Andre Moreau".
use('sample_mflix');
db.embedded_movies.find({plot: {$regex: "Andre Moreau"}}).limit(3);
use('sample_mflix');
db.embedded_movies.find({plot: /Andre Moreau/i}).limit(3);

- documento con votes (votos) mayores que 1000. Mostrar solo los directores de la películas
use('sample_mflix');
db.embedded_movies.find({"imdb.votes": {$gt: 1000}}, {"directors": 1}).limit(3);

- document con 'released' (fecha de estreno) entre 1914 y 1915. Mostrar solo el título y la fecha de estreno.

añadimos coleccion songs a clase
use("clase");
db.songs.insertMany( [
   { _id: 0, "artist" : "Blue Öyster Cult", "title": "The Reaper" },
   { _id: 1, "artist": "Blue Öyster Cult", "title": "Godzilla" },
   { _id: 2, "artist" : "Blue Oyster Cult", "title": "Take Me Away" }
])


https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/mongodb/05-schemas.mongodb.sql
--ojo clase no scott como pone en la Web
CREACION DE UNA COLLECCION(TABLA) CON ESQUEMA (SCHEMA) PARA EVITAR QUE INSERTEMOS DATOS SUELTOS DEBIDO A UN ERROR AL 
ESCRIBIR UN CAMPO

use("clase"); 

db.createCollection("usuarios", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["usuario", "nombre", "apellido", "correo", "tipo_usuario", "activo"],
      additionalProperties: false, // OJO IMPORTANTE
      properties: {
        _id: {
          bsonType: "objectId",
          description: "Debe ser un ObjectId generado automáticamente"
        },
        usuario: {
          bsonType: "string",
          description: "Debe ser una cadena de texto y es obligatorio"
        },
        nombre: {
          bsonType: "string",
          description: "Debe ser una cadena de texto y es obligatorio"
        },
        apellido: {
          bsonType: "string",
          description: "Debe ser una cadena de texto y es obligatorio"
        },
        correo: {
          bsonType: "string",
          pattern: "^.+@.+\\..+$",
          description: "Debe ser una cadena con formato de correo electrónico válido y es obligatorio"
        },
        pais: {
          bsonType: ["string", "null"],
          description: "Puede ser una cadena de texto o null, y es opcional"
        },
        tipo_usuario: {
          bsonType: "string",
          enum: ["Admin", "Cliente", "Proveedor"],
          description: "Solo puede ser 'Admin', 'Cliente', 'Proveedor'"
        },
        fecha_nacimiento: {
          bsonType: ["date", "null"],
          description: "Puede ser una fecha o null, y es opcional"
        },
        activo: {
          bsonType: "bool",
          description: "Debe ser un valor booleano y es obligatorio"
        }
      }
    }
  }
});

db.usuarios.createIndex({ usuario: 1 }, { unique: true });

db.usuarios.createIndex({ correo: 1 }, { unique: true });

******************
// Documento 1: Correcto (debería insertarse sin problemas)
{
  "usuario": "juanperez",
  "nombre": "Juan",
  "apellido": "Pérez",
  "correo": "juan.perez@example.com",
  "pais": "España",
  "tipo_usuario": "Cliente",
  "fecha_nacimiento": ISODate("1990-05-20T00:00:00Z"),
  "activo": true
}

USARIAMOS EL SIGUIENTE 
use("clase");
db.usuarios.insertOne({
  "usuario": "juanperez",
  "nombre": "Juan",
  "apellido": "Pérez",
  "correo": "juan.perez@example.com",
  "pais": "España",
  "tipo_usuario": "Cliente",
  "fecha_nacimiento": ISODate("1990-05-20T00:00:00Z"),
  "activo": true
});

use("clase");
db.usuarios.insertOne({
  "Usuario": "juanperez2", // DARA ERROR PORQUE DEBE SER usuario
  "nombre": "Juan2",
  "apellido": "Pérez2",
  "correo": "juan.perez2@example.com",
  "pais": "España",
  "tipo_usuario": "Cliente",
  "fecha_nacimiento": ISODate("1990-05-20T00:00:00Z"),
  "activo": true
});


*******************************
*******************************
Actividad: Crear un esquema MongoDB para una colección libros

En esta actividad, debes crear un esquema JSON para validar documentos en una colección de
 libros. El esquema debe incluir las siguientes reglas y validaciones:

titulo: Obligatorio. Debe ser una cadena de texto (string).

autor: Obligatorio. Debe ser una cadena de texto.

genero: Obligatorio. Debe ser una cadena y su valor solo puede estar dentro de un conjunto
 limitado (enum) con opciones como: "Ficción", "No Ficción", "Misterio", "Romance", etc.

fecha_publicacion: Obligatorio. Debe ser un campo de tipo fecha (date).

paginas: Opcional. Si se incluye, debe ser un entero positivo mayor o igual a 1.

disponible: Obligatorio. Debe ser un valor booleano (true o false).

precio: Obligatorio. Debe ser un número decimal (double) mayor que 0. Opcionalmente, puede
 tener un rango definido, por ejemplo entre 10 y 1000.
Puedes usar minimum: x, maximum: y,

No se permiten campos adicionales que no estén definidos en el esquema.

Crear un índice en el campo genero para mejorar las consultas basadas en género.

use("clase");
db.createCollection("libros", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["titulo", "autor", "genero", "fecha_publicacion", "paginas", "disponible", "precio"],
      additionalProperties: false, // NO PERMITE AÑADIR MAS CAMPOS
      properties: {
        _id: {
          bsonType: "objectId",
          description: "Debe ser un ObjectId generado automáticamente"
        },
        titulo: {
          bsonType: "string",
          description: "Debe ser una cadena de texto y es obligatorio"
        },
        autor: {
          bsonType: "string",
          description: "Debe ser una cadena de texto y es obligatorio"
        },
        genero: {
          bsonType: "string",
          enum: [
            "Ficción", "No Ficción", "Misterio", "Romance", "Terror", "Drama",
            "Acción", "Aventura", "Comedia", "Terror", "Romance"
          ],
          description: "Solo puede ser 'Ficción', 'No Ficción', 'Misterio', 'Romance', 'Terror', 'Drama', 'Acción', 'Aventura', 'Comedia', 'Terror', 'Romance'"
        },
        fecha_publicacion: {
          bsonType: "date",
          description: "Debe ser una fecha y es obligatorio"
        },
        paginas: {
          bsonType: "int",
          minimum: 1, 
          description: "Debe ser un número y es obligatorio"
        },
        disponible: {
          bsonType: "bool",
          description: "Debe ser un valor booleano y es obligatorio"
        },
        precio: {
          bsonType: "double",
          minimum: 0.01, 
          maximum: 10000,
          description: "Debe ser un número y es obligatorio"
        }
      }
    }
  }
});

//db.usuarios.createIndex({ usuario: 1 }, { unique: true });
//db.usuarios.createIndex({ correo: 1 }, { unique: true });

***************
***************
***************

crear carpeta /express_mongodb
crear ficheros

node client-test-conn.js

npm run dev -- para ejecutar 

node client-fetch-products.js

node client-console-app.js

crear .env con
MONGODB_URI=mongodb+srv://mongodb:mongodb@nzcluster-01.ox3d0eu.mongodb.net/?retryWrites=true&w=majority&appName=NZCluster-01
