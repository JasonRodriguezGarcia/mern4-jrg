https://github.com/chekulhan/Desarrollo-Web/blob/main/UF1845-Acceso-a-Datos/postgres/10-transactions.md

Actividad
Vamos a ejecutar código para crear un nuevo departamento, y a la vez, un nuevo empleado que pertenece a este departamento.
 Llevarlo a cabo usando transacciones. Por ejemplo:

INSERT INTO scott.dept (deptno, dname, loc)
VALUES (60, 'I+D', 'BARCELONA');

INSERT INTO scott.emp (empno, ename, job, mgr, hiredate, sal, comm, deptno)
VALUES (8888, 'ANALISTA2', 'ANALISTA', 7839, CURRENT_DATE, 3500, NULL, 60);

**************************

Ejemplo de niveles de aislamiento

CREATE SCHEMA IF NOT EXISTS banco;

CREATE TABLE banco.cuentas (
    id_cuenta SERIAL PRIMARY KEY,
    titular VARCHAR(100) NOT NULL,
    saldo NUMERIC(12,2) NOT NULL DEFAULT 0
);

INSERT INTO banco.cuentas (titular, saldo) VALUES
('Juan Pérez', 1000.00),
('María López', 500.00);

herram consulkta
select * from banco.cuentas;

BEGIN; -- añadir TRANSACTION en otros no postgres
	UPDATE banco.cuentas
	SET saldo = saldo -50
	WHERE id_cuenta = 1;

	SELECT * FROM banco.cuentas WHERE id_cuenta = 1;
	
	UPDATE banco.cuentas
	SET saldo = saldo +50
	WHERE id_cuenta = 2;

	SELECT * FROM banco.cuentas WHERE id_cuenta = 2;
COMMIT;
ROLLBACK; -- SI HAY ALGUN PROBLEMA

podemos ejecutar por trozos para ver movimientos

prodecimientos almacenados hace falta transacciones¿? en postgres y en otros¿?

en una ejecucion hasta 
BEGIN; -- añadir TRANSACTION en otros no postgres
	UPDATE banco.cuentas
	SET saldo = saldo -50
	WHERE id_cuenta = 1;

si hacemos 
SELECT * FROM banco.cuentas
WHERE saldo > 100;

no aparece saldo de 1000 en cuenta 1

hay varios niveles en transacciones (AISLAMIENTO)
1READ UNCOMMITETD 950 EN POSTGRES NO EXISTE PERO EN OTRAS SI (dirty reads)
2READ COMMITED 1000 (por defecto en postgres)
3REPEATABLE READ 
4SERIALIZABLE (COLA TRANSACCIONES)

2 Y 3 SE PUEDEN ver

HERRAM consulkta

-- SE ESTA EN OTRA TRANSACCION
-- BEGIN ISOLATION LEVEL READ UNCOMMITTED; -- NO PERMITIDO EN POSTGRES
-- BEGIN ISOLATION LEVEL READ COMMITTED;
-- BEGIN ISOLATION LEVEL REPEATABLE READ;
-- BEGIN ISOLATION LEVEL SERIALIZABLE;
BEGIN; -- añadir TRANSACTION en otros no postgres
	UPDATE banco.cuentas
	SET saldo = saldo -750
	WHERE id_cuenta = 1;

SELECT * FROM banco.cuentas
WHERE saldo > 100;

ROLLBACK;
SHOW TRANSACTION ISOLATION LEVEL;
**********************
Proyecto bancaria
Vamos a poner todo junto en un mini proyecto bancaria. Te han contratado para llevar a cabo un proyecto usando 
Python como interfaz.

Diseñar un modelo E/R para los clientes del banco. Los clientes pueden contratar cuentas de transacciones y de 
ahorros. No es necesario gestionar las transacciones, pero seria útil mantener el saldo en cada unos de los 
productos bancarias que tienen los clientes. Tomar en cuenta como vas a gestionar el cierre de una cuenta, los 
tipos de cuentas, el saldo, ...

Implantar las tablas y sus relaciones en Postgres:

¿Qué restricciones podrias implantar a traves de UNIQUE, CHECK, PRIMARY KEY, tipos de datos, ...
Vistas: Diseñar unas vistas para el uso típico de la aplicación. Los usuarios (administración) ha comentado que 
seria útil:
Mostrar los cliente VIP, con saldo más de 10,000 euros. 
crear funcion mask_cuenta(xx)
    varing char IN _numero
    SELECT left(_numero, 4) || '****' || right(_numero, 2);
CREAR VISTA vw_clientes_vip
 SELECT c.nombre,
    banco.mask_cuenta(b.numero) AS "Cuenta"
   FROM banco.clientes c
     JOIN banco.cuentas b ON b.id_cliente = c.id_cliente
  WHERE b.saldo >= 10000;
uso select * from banco.vw_clientes_vip

Los clientes que no tengan nada en el saldo Por seguridad, el numero de la cuenta deberia mostrar siempre con 
masked, por ejemplo: 12131*****12171
Funciones: Diseñar unas funciones para mostrar:
Cuántas cuentas tiene un cliente
funcion cliente_cuentas
    varing char IN _idcliente
CODIGO
    SELECT COUNT(*) FROM banco.cuentas
    WHERE id_cliente = _idcliente;
USO
select banco.cliente_cuentas(4)

Qué saldo en total tiene un cliente. Por ejemplo, si tienen dos cuentas.

Stored Procedures Crear un SP para transferir fondos. Agregar los siguientes restricciones:
    No puedes transferir desde => a tu propio cuenta
    La cantidad tiene que ser 1 euro o más. Dada la ley bacaria, el máximo es 10,000 euros.
testing en herramientas de consulta
DO $$
DECLARE
	_cuenta_inicial varchar(20) := 'ES12345678';
	_cuenta_final varchar(20) := 'ES88776655';
	_cantidad INTEGER := 1000;
BEGIN
	IF _cuenta_inicial = _cuenta_final THEN
		RAISE EXCEPTION 'NO VALE TRANSFERIR A LA MISMA CUENTA';
	ELSE
		IF _cantidad < 1 OR _cantidad > 10000 THEN
			RAISE EXCEPTION 'CANTIDAD NO VALIDA (min: 1Eur, max: 10000Eur';
		ELSE
			-- QUITAR CANTIDAD CUENTA ORIGEN
			UPDATE banco.cuentas SET saldo = saldo - _cantidad
			WHERE numero = _cuenta_inicial;
			-- AÑADIR CANTIDAD CUENTA DESTINO
			UPDATE banco.cuentas SET saldo = saldo + _cantidad
			WHERE numero = _cuenta_final;
		END IF;
	END IF;
END;
$$ language plpgsql

creando procedimiento
transferir_fondos
definicion 
    plpgsql
Argumentos
    character varing IN _cuenta_inicial
    character varing IN _cuenta_final
    integer IN _cantidad
CODIGO
BEGIN
	IF _cuenta_inicial = _cuenta_final THEN
		RAISE EXCEPTION 'NO VALE TRANSFERIR A LA MISMA CUENTA';
	ELSE
		IF _cantidad < 1 OR _cantidad > 10000 THEN
			RAISE EXCEPTION 'CANTIDAD NO VALIDA (min: 1Eur, max: 10000Eur';
		ELSE
			-- QUITAR CANTIDAD CUENTA ORIGEN
			UPDATE banco.cuentas SET saldo = saldo - _cantidad
			WHERE numero = _cuenta_inicial;
			-- AÑADIR CANTIDAD CUENTA DESTINO
			UPDATE banco.cuentas SET saldo = saldo + _cantidad
			WHERE numero = _cuenta_final;
		END IF;
	END IF;
END;
uso
CALL banco.transferir_fondos('ES12345678', 'ES88776655', 0) -- NO DEJA
CALL banco.transferir_fondos('ES12345678', 'ES88776655', 11111110) -- NO DEJA
CALL banco.transferir_fondos('ES12345678', 'ES88776655', 111) -- OK

Triggers Cada vez que se ejecuta una transacción en la tabla 'cuentas', hay que registrar la transferencia en una
 tabla de audit. (AFTER)
CREATE TABLE IF NOT EXISTS banco.audit
(
    id SERIAL PRIMARY KEY,
    action TEXT, -- INSERT UPDATE
    action_time timestamp without time zone,
    usuario TEXT, -- connexion ()
    values_before jsonb,
    values_after jsonb,
    tabla TEXT
)
____NOTAS
insert audit (action, action_time, USUARIO, values_before, values_after, tabla )
    values TG_OP, NOW(), CURRENT_USER, row_to_jsonb(OLD), row_to_jsonb(NEW), TG_TABLE_NAME)

if tg_op = 'INSERT' THEN
    insert into log
    insert new
ELSE 
____FIN NOTAS

HERRAMIENTA DE CONSULTA (PRUEBAS)
DO $$
DECLARE
-- funcion trigger tras actualizar cuenta (after en la tabla)
-- guarde datos en audit
-- action
-- action_time
-- usuario
-- values_before
-- values_after
-- tabla

-- ¿qué variables intermedios hace falta?
	_action varchar(100):= 'INSERT';
	_action_time DATE := NOW(); -- CURRENT_DATE;
	_usuario varchar := CURRENT_USER;
	_values_before jsonb := '{"id_cuenta": 1, "id_cliente": 1, "numero": "ES12345678",
						"tipo": "A", "estado": true, "saldo": 110 }'::json;  -- OJO SOLO PARA TESTING
	_values_after jsonb := '{"id_cuenta": 1, "id_cliente": 1, "numero": "ES12345678",
						"tipo": "A", "estado": true, "saldo": 1230 }'::json;  -- OJO SOLO PARA TESTING
	_tabla varchar(100) := 'cuentas'; -- TG_TABLE_NAME;
BEGIN
	INSERT INTO banco.audit 
		(action, action_time, usuario, values_before, values_after, tabla)
		VALUES
		(_action, _action_time, _usuario, _values_before, _values_after, _tabla);
END;
$$ LANGUAGE plpgsql;

EN LA FUNCION TRIGGER trg_audit_registry
CODIGO

DECLARE
-- funcion trigger tras actualizar(UPDATE) cuenta (AFTER en la tabla)
-- guarde datos en audit
-- action
-- action_time
-- usuario
-- values_before
-- values_after
-- tabla
BEGIN
	INSERT INTO banco.audit 
		(action, action_time, usuario, values_before, values_after, tabla)
		VALUES
		(TG_OP, NOW(), CURRENT_USER, to_jsonb(OLD), to_jsonb(NEW), TG_TABLE_NAME);
	RETURN NULL;
END;
En la tabla añadir funcion disparadora
EVENTOS
	Dispara AFTER
	UPDATE activado

MEJORAS HECHAS PARA QUE VALGA PARA INSERT, UPDATE, DELETE CON CODIGO OPTIMIZADO
EN LA FUNCION TRIGGER
CODIGO
DECLARE
-- funcion trigger tras
	-- insertar cuenta (after en la tabla)
	-- actualizar cuenta (after en la tabla)
	-- borrar cuenta (after en la tabla)
-- guarde datos en audit
-- action
-- action_time
-- usuario
-- values_before
-- values_after
-- tabla
	_values_before jsonb; -- := TO_JSONB(OLD);  -- OJO SOLO PARA TESTING
	_values_after jsonb; -- := TO_JSONB(NEW);  -- OJO SOLO PARA TESTING

BEGIN
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
		_values_before = to_json(OLD);
	ELSE
		_values_before = '{}'::jsonb;
	END IF;
	IF TG_OP = 'UPDATE' OR TG_OP = 'INSERT' THEN
		_values_after = to_json(NEW);
	ELSE
		_values_after = '{}'::jsonb;	
	END IF;
	INSERT INTO banco.audit 
		(action, action_time, usuario, values_before, values_after, tabla)
		VALUES
		(TG_OP, NOW(), CURRENT_USER, _values_before, _values_after, TG_TABLE_NAME);
	RETURN NULL;
END;
Y en la tabla cuentas la funcion trigger
EVENTOS	
	Dispara AFTER
	INSERT activado
	UPDATE activado
	DELETE activado


TESTING
INSERT INTO banco.cuentas(
	id_cliente, numero, tipo, estado, saldo)
	VALUES (4, 'ES33776633', 'T', true, 3333);

CALL banco.transferir_fondos('ES11776633', 'ES66557776', 333);

INSERT INTO banco.cuentas(
	id_cliente, numero, tipo, estado, saldo)
	VALUES (4, 'ES11776611', 'T', true, 2000);

DELETE FROM banco.cuentas
WHERE id_cuenta = 10;


Usuarios Crear un usuario para acceder a la base de datos desde Python. Darle acceso a la vista y algunos objetos
 necesarios
Crear una interfaz de Python, con opciones para:
Mostrar informes: usuarios VIP, clientes sin saldo, ...
Dar de alta a un cliente
Ejecutar una transferencia
